require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

# describe AccountRequestsController do
# 
#   # This should return the minimal set of attributes required to create a valid
#   # AccountRequest. As you add validations to AccountRequest, be sure to
#   # update the return value of this method accordingly.
#   def valid_attributes
#     {}
#   end
# 
#   describe "GET index" do
#     it "assigns all account_requests as @account_requests" do
#       account_request = AccountRequest.create! valid_attributes
#       get :index
#       assigns(:account_requests).should eq([account_request])
#     end
#   end
# 
#   describe "GET show" do
#     it "assigns the requested account_request as @account_request" do
#       account_request = AccountRequest.create! valid_attributes
#       get :show, :id => account_request.id.to_s
#       assigns(:account_request).should eq(account_request)
#     end
#   end
# 
#   describe "GET new" do
#     it "assigns a new account_request as @account_request" do
#       get :new
#       assigns(:account_request).should be_a_new(AccountRequest)
#     end
#   end
# 
#   describe "GET edit" do
#     it "assigns the requested account_request as @account_request" do
#       account_request = AccountRequest.create! valid_attributes
#       get :edit, :id => account_request.id.to_s
#       assigns(:account_request).should eq(account_request)
#     end
#   end
# 
#   describe "POST create" do
#     describe "with valid params" do
#       it "creates a new AccountRequest" do
#         expect {
#           post :create, :account_request => valid_attributes
#         }.to change(AccountRequest, :count).by(1)
#       end
# 
#       it "assigns a newly created account_request as @account_request" do
#         post :create, :account_request => valid_attributes
#         assigns(:account_request).should be_a(AccountRequest)
#         assigns(:account_request).should be_persisted
#       end
# 
#       it "redirects to the created account_request" do
#         post :create, :account_request => valid_attributes
#         response.should redirect_to(AccountRequest.last)
#       end
#     end
# 
#     describe "with invalid params" do
#       it "assigns a newly created but unsaved account_request as @account_request" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         AccountRequest.any_instance.stub(:save).and_return(false)
#         post :create, :account_request => {}
#         assigns(:account_request).should be_a_new(AccountRequest)
#       end
# 
#       it "re-renders the 'new' template" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         AccountRequest.any_instance.stub(:save).and_return(false)
#         post :create, :account_request => {}
#         response.should render_template("new")
#       end
#     end
#   end
# 
#   describe "PUT update" do
#     describe "with valid params" do
#       it "updates the requested account_request" do
#         account_request = AccountRequest.create! valid_attributes
#         # Assuming there are no other account_requests in the database, this
#         # specifies that the AccountRequest created on the previous line
#         # receives the :update_attributes message with whatever params are
#         # submitted in the request.
#         AccountRequest.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
#         put :update, :id => account_request.id, :account_request => {'these' => 'params'}
#       end
# 
#       it "assigns the requested account_request as @account_request" do
#         account_request = AccountRequest.create! valid_attributes
#         put :update, :id => account_request.id, :account_request => valid_attributes
#         assigns(:account_request).should eq(account_request)
#       end
# 
#       it "redirects to the account_request" do
#         account_request = AccountRequest.create! valid_attributes
#         put :update, :id => account_request.id, :account_request => valid_attributes
#         response.should redirect_to(account_request)
#       end
#     end
# 
#     describe "with invalid params" do
#       it "assigns the account_request as @account_request" do
#         account_request = AccountRequest.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         AccountRequest.any_instance.stub(:save).and_return(false)
#         put :update, :id => account_request.id.to_s, :account_request => {}
#         assigns(:account_request).should eq(account_request)
#       end
# 
#       it "re-renders the 'edit' template" do
#         account_request = AccountRequest.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         AccountRequest.any_instance.stub(:save).and_return(false)
#         put :update, :id => account_request.id.to_s, :account_request => {}
#         response.should render_template("edit")
#       end
#     end
#   end
# 
#   describe "DELETE destroy" do
#     it "destroys the requested account_request" do
#       account_request = AccountRequest.create! valid_attributes
#       expect {
#         delete :destroy, :id => account_request.id.to_s
#       }.to change(AccountRequest, :count).by(-1)
#     end
# 
#     it "redirects to the account_requests list" do
#       account_request = AccountRequest.create! valid_attributes
#       delete :destroy, :id => account_request.id.to_s
#       response.should redirect_to(account_requests_url)
#     end
#   end
# 
# end

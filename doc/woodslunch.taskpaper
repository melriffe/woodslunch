Days off:
	- Clean up listing similar to menu items with only Edit links on the right and delete links on the edit page. @done(2011-07-13)
	- Get rid of show page. @done(2011-07-13)
	- Specs in student order spec
		Now that each day is not necessarily mapped to an Order object, it doesn't make sense to return order instances. Instead probably want to give back some sort of wrapper. Not sure what to call it, something like DayWrapper or simply Day, maybe DayOfMonth. It could also be a simple struct that holds data for the day (with the day of the month so we don't have to keep querying order.served_on.day), the day of week name (for the html class attribute), and a method that responds to what kind of thing it is, sort of the way a Mime::Type works, perhaps partial_name, that way we can drive the partial that's rendered based on that method day_of_month.name_for_partial and we can hide the messy type checking in there. Actually we can avoid type checking by just querying, e.g., day.order? which calls day.order, returns true/false based on whether that object is nil. Do the same thing for day_off. Also, should provide a method that returns the object needed for the partial, object_for_partial.
			Day is most generic/correct name I can think of.
				Day.wrapped_object. View can use this to drive which partial to use, etc., by using .class
				Day.name => 'monday'
			When we implement UserOrder, in addition to StudentOrder, it may be the case that
	- Split index view into Upcoming & Past
Misc:
	- Identify big picture tasks
		- Go through Basecamp
			Quantity field for student orders
			Order for account users
			Payments
			Holidays and days off
			Better styles
			Reports
		- Go through Dev notes
	- Users listing
		- Ability to make someone an admin @priority @wip
	- Staging app for Heroku.
	- Deploy and use sendgrid. What does sendgrid give us in the way of UI to resend emails, etc. @priority @done(2011-07-10)
	- Also convert menu_items listing to use .listing_item classes in _application.scss and remove the .menu_item item stuff in _admin.scss
	- Change error_messages_for to error_notification. The html should be such that the browser catches the errors if possible.
	Styles:
		- Convert menu item styles to use basic listing styles.
Users:
	- User#can_login? set to true by default, but will be false for those user accounts created through accounts/new
		- Email, password, password_confirmation validations should only run when can_login is true
		- can_login should default to true in db if possible
Accounts:
AccountRequests:
	- AccountActivation 
		- Log user in after activating account @done(2011-07-10)
			- Implemented but need spec for this. Controller spec.
		- AccountActivation save method needs to handle failures.
			- If passwords don't match, redirect to form with error messages. @done(2011-07-10)
			- Any other problems should generate an exception, and I should get a notification
				- Setup newrelic
					- @q Does new relic provide exception notifications
				- Integrate http://rubygems.org/gems/exception_notification
	- Deploy and setup sendgrid @done(2011-07-10)
		- Test manually with account request @done(2011-07-10)
		- Does sendgrid have a web ui that shows account activity, like when an email was last sent, etc. @q If so, then we don't need to worry about tracking when an email was last sent. YES! @done(2011-07-10)
	- Email gets sent upon successful activation. Actually, after activation, need to redirect to screen to setup password (with confirmation), then automatically log in.
	- Deny action @priority
	- Activate
		GET account_requests/activate/:token
		Matches token against account requests in the pending 
	- AccountRequest submitted for pending AccountRequest#email request displays "There is a pending account request for #{email}."
	- AccountRequest submitted for denied AccountRequest#email creates a new AccountRequest in pending state.
	- Email must be unique for pending AccountRequests.
	- State machine for AccountRequest#state: pending, approved, denied
		pending -> approved, then account gets created and AccountRequest is destroyed
		pending -> denied
		denied -> pending
		state_machine gem (from pluginaweek) is recommended
	- Email must be unique for accounts, so when 
	- Resend email. Can we do this with sendgrid?
AccountInvitation:
@maybe What if we want to track how long it's been since the last invitation email was sent. last_sent_at, send_count, etc. Unless sendgrid gives us a way to do this stuff.
Accounts/Users/Students:
	- inherited_resources, generators for accounts/users/students with nested structure, e.g., accounts/:account_id/users
	- Test scenario of adding a user to an account.
	- Payment history (a separate model most likely).
		- Admin records a payment for this account.
		- Payment model. Belongs to account with presence validation.
Orders:
	- An order must have a unique combination of student id and served_on date. In other words, there can only be one order per student per day. Enforce this in a validation. @priority
Menu Items:
	- @q Handle items on non-daily schedules?
		https://github.com/seejohnrun/ice_cube
		http://ruby-toolbox.com/categories/recurring_events.html
Later:
	- Improve number of sql statements on new order form, although it looks like most of them are coming from the cache.
	- Presenter gem
Archive:
	- Get rid of AccountInvitation model. Send the mail upon account request approval. @done(2011-07-10) @project(AccountRequests)
	- activation_token should not be generated until the account request has been approved @done(2011-07-10) @project(AccountRequests)
	- Nav menu @done(2011-07-08) @project(Misc)
	- Finish golden path account activation request spec @done(2011-07-10)
	- activate! state transition @done(2011-07-10)
		@maybe Perhaps account_request.acvitate! should be handling creating the account, user, and students? @done(2011-07-10)
		- Once activated the account request gets destroyed. @done(2011-07-10)
	- Change AccountInvitationMailer.invitation to AccountMailer.activation @done(2011-07-11)
	- Refactor menu_items stuff so it's not it admin namespace. There are going to be a number of controllers that have actions accessible by both admins and non-admins. So, everything's not sequestered off into the admin namespace necessarily. @priority @done(2011-07-11)

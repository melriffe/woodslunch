- Go through specs carefully and see what's commented out that we might need. @done(2011-08-13)
- Account balance (see dev notes).
	- Looks good. Need spec for destroy. @done(2011-08-14)
	- Peruse through account balance-related specs
		- Get rid of total field for Order and remove any specs. Or move them
- Day off tests
- Application configuration (database-backed) for setting first and last order dates.
- Charge 2.5% per transaction, don't worry about the $.30.
- Screenshots or video needed by Friday the 19th.
	- Just show them on the 19th. Perhaps allow for account requests if we are online.
	q1w2e3
- What happens if someone hits the activation URL more than once?
- Figure out how to ensure order_id is set for ordered_menu_item without screwing up accepts_nested_attributes_for. @later
- Figure out what's wrong with sticky footer.
7/26 Meeting Notes:
Cutoff for first month of year, then open it up.
Days off:
	- Specs in student order spec
		Now that each day is not necessarily mapped to an Order object, it doesn't make sense to return order instances. Instead probably want to give back some sort of wrapper. Not sure what to call it, something like DayWrapper or simply Day, maybe DayOfMonth. It could also be a simple struct that holds data for the day (with the day of the month so we don't have to keep querying order.served_on.day), the day of week name (for the html class attribute), and a method that responds to what kind of thing it is, sort of the way a Mime::Type works, perhaps partial_name, that way we can drive the partial that's rendered based on that method day_of_month.name_for_partial and we can hide the messy type checking in there. Actually we can avoid type checking by just querying, e.g., day.order? which calls day.order, returns true/false based on whether that object is nil. Do the same thing for day_off. Also, should provide a method that returns the object needed for the partial, object_for_partial.
			Day is most generic/correct name I can think of.
				Day.wrapped_object. View can use this to drive which partial to use, etc., by using .class
				Day.name => 'monday'
			When we implement UserOrder, in addition to StudentOrder, it may be the case that
	- Split index view into Upcoming & Past
Misc:
	- Identify big picture tasks
		- Go through Basecamp
			Quantity field for student orders
			Order for account users
			Payments
			Holidays and days off
			Better styles
			Reports
		- Go through Dev notes
	- Users listing
		- Ability to make someone an admin @priority
	- Staging app for Heroku.
	- Also convert menu_items listing to use .listing_item classes in _application.scss and remove the .menu_item item stuff in _admin.scss
	- Change error_messages_for to error_notification. The html should be such that the browser catches the errors if possible.
	Styles:
		- Convert menu item styles to use basic listing styles.
Users:
	- User#can_login? set to true by default, but will be false for those user accounts created through accounts/new
		- Email, password, password_confirmation validations should only run when can_login is true
		- can_login should default to true in db if possible
Accounts:
AccountRequests:
	- AccountActivation 
		- Need spec for logging in a user after activating account, perhaps a controller spec.
		- AccountActivation save method needs to handle failures.
			- Any other problems should generate an exception, and I should get a notification
				- Setup newrelic
					- @q Does new relic provide exception notifications
				- Integrate http://rubygems.org/gems/exception_notification
	- Email gets sent upon successful activation. Actually, after activation, need to redirect to screen to setup password (with confirmation), then automatically log in.
	- Deny action @priority
	- Activate
		GET account_requests/activate/:token
		Matches token against account requests in the pending 
	- AccountRequest submitted for pending AccountRequest#email request displays "There is a pending account request for #{email}."
	- AccountRequest submitted for denied AccountRequest#email creates a new AccountRequest in pending state.
	- Email must be unique for pending AccountRequests.
	- State machine for AccountRequest#state: pending, approved, denied
		pending -> approved, then account gets created and AccountRequest is destroyed
		pending -> denied
		denied -> pending
		state_machine gem (from pluginaweek) is recommended
	- Email must be unique for accounts, so when 
	- Resend email. Can we do this with sendgrid?
AccountInvitation:
@maybe What if we want to track how long it's been since the last invitation email was sent. last_sent_at, send_count, etc. Unless sendgrid gives us a way to do this stuff.
Accounts/Users/Students:
	- inherited_resources, generators for accounts/users/students with nested structure, e.g., accounts/:account_id/users
	- Test scenario of adding a user to an account.
	- Payment history (a separate model most likely).
		- Admin records a payment for this account.
		- Payment model. Belongs to account with presence validation.
Orders:
	- An order must have a unique combination of student id and served_on date. In other words, there can only be one order per student per day. Enforce this in a validation.
Menu Items:
Later:
	- Improve number of sql statements on new order form, although it looks like most of them are coming from the cache. @later
	A la carte card. Buy in denominations. Marked off on per-use. Something down the line.
		When you pay have option to add money for a la carte, purchase grocery card.
		Paypal Basic account has shopping cart which might be useful for this stuff.
Archive:
	- STI experiment @done(2011-08-13)
	- Edit order @done(2011-08-13)
		- The first thing to figure out is whether or not it's a good idea to have the urls like I have them. And it's probably not. @done(2011-08-13)
		- Route to edit when an order exists. @done(2011-08-13)
		- Add to existing student order @done(2011-08-13)
		- Remove from existing student order @done(2011-08-13)
		- Change items in existing student order @done(2011-08-13)
	- Continue student order request specs. @done(2011-08-13)
	- Get specs passing @done(2011-08-13)
	- Merge back to master. @done(2011-08-13)
	- Specs for new student order that include, use the new URLs with query parameters. @done(2011-08-10)
	- Determine the current/default month. @done(2011-08-12)
	- Route to new or edit student_order_path as appropriate, perhaps in helper method link_to_current_student_order(student), but route as well to be sure. @done(2011-08-12) @project(Orders)
	- Only save orders that have ordered_menu_items @done(2011-08-09)
	- starts_on and ends_on need to be set on create @done(2011-08-09)
	- Build new orders for each weekday @done(2011-08-08)
	- Quantity of ordered menu item @done(2011-07-31) @project(Orders)
		- quantity added to database @done(2011-07-31)
		- quantity validated for presence and numericality @done(2011-07-31)
		- Max quantity for display @done(2011-07-31)
		- Must display a select on the form for each menu item @done(2011-07-31)
		- Save orders @done(2011-07-31)
			- Don't know if order.update_attributes!(order_attributes) on line 88 of StudentOrder is going to work. Might need to test that manually. @done(2011-07-31)
			- Test Order.create! manually using params copied from log. @done(2011-07-31)
		- The proper quantity must be selected if an order has already been placed for the month @done(2011-07-31)
		- Order should be destroyed if no ordered menu items. @done(2011-07-31)
		- Account balance must take in to account the quantity @done(2011-07-31)
	- Go through notes to pick the next task. I think quantities would be a good next step, but verify that. @done(2011-07-31)
	- Get all student_orders request specs passing, even the pending ones. @done(2011-07-30)
	- Clean up listing similar to menu items with only Edit links on the right and delete links on the edit page. @done(2011-07-13) @project(Days off)
	- Get rid of show page. @done(2011-07-13) @project(Days off)
	- Deploy and use sendgrid. What does sendgrid give us in the way of UI to resend emails, etc. @done(2011-07-10) @project(Misc)
	- Log user in after activating account @done(2011-07-10) @project(AccountRequests)
	- If passwords don't match, redirect to form with error messages. @done(2011-07-10) @project(AccountRequests)
	- Deploy and setup sendgrid @done(2011-07-10) @project(AccountRequests)
		- Test manually with account request @done(2011-07-10)
		- Does sendgrid have a web ui that shows account activity, like when an email was last sent, etc. @q If so, then we don't need to worry about tracking when an email was last sent. YES! @done(2011-07-10)
	- Get rid of AccountInvitation model. Send the mail upon account request approval. @done(2011-07-10) @project(AccountRequests)
	- activation_token should not be generated until the account request has been approved @done(2011-07-10) @project(AccountRequests)
	- Nav menu @done(2011-07-08) @project(Misc)
	- Finish golden path account activation request spec @done(2011-07-10)
	- activate! state transition @done(2011-07-10)
		@maybe Perhaps account_request.acvitate! should be handling creating the account, user, and students? @done(2011-07-10)
		- Once activated the account request gets destroyed. @done(2011-07-10)
	- Change AccountInvitationMailer.invitation to AccountMailer.activation @done(2011-07-11)
	- Refactor menu_items stuff so it's not it admin namespace. There are going to be a number of controllers that have actions accessible by both admins and non-admins. So, everything's not sequestered off into the admin namespace necessarily. @priority @done(2011-07-11)
